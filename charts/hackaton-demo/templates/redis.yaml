{{- if .Values.redis.enabled }}
---
apiVersion: v1
kind: Secret
metadata:
  name: {{ .Release.Name }}-redis-secret
  labels:
    app.kubernetes.io/name: {{ .Release.Name }}
type: Opaque
stringData:
  REDIS_PASSWORD: {{ .Values.redis.password }}
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: {{ .Release.Name }}-redis-pvc
  labels:
    app.kubernetes.io/name: {{ .Release.Name }}
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: {{ .Values.redis.pvcSize }}
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ .Release.Name }}-redis
  labels:
    app.kubernetes.io/name: {{ .Release.Name }}
spec:
  replicas: 1
  revisionHistoryLimit: 2
  selector:
    matchLabels:
      app.kubernetes.io/name: {{ .Release.Name }}-redis
  template:
    metadata:
      labels:
        app.kubernetes.io/name: {{ .Release.Name }}-redis
    spec:
      containers:
      - name: redis
        image: "{{ .Values.redis.image.repository }}:{{ .Values.redis.image.tag }}"
        command: ["redis-server", "--requirepass", "$(REDIS_PASSWORD)"]
        env:
        - name: REDIS_PASSWORD
          valueFrom:
            secretKeyRef:
              name: {{ .Release.Name }}-redis-secret
              key: REDIS_PASSWORD
        ports:
        - containerPort: 6379
          name: redis
        volumeMounts:
        - name: data
          mountPath: /data
      volumes:
      - name: data
        persistentVolumeClaim:
          claimName: {{ .Release.Name }}-redis-pvc
---
apiVersion: v1
kind: Service
metadata:
  name: {{ .Release.Name }}-redis
  labels:
    app.kubernetes.io/name: {{ .Release.Name }}-redis
spec:
  ports:
  - port: 6379
    targetPort: redis
  selector:
    app.kubernetes.io/name: {{ .Release.Name }}-redis
{{- end }} 