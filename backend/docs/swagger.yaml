basePath: /
definitions:
  models.AuthResponse:
    properties:
      access_token:
        type: string
      expires_in:
        type: integer
      refresh_token:
        type: string
      token_type:
        type: string
      user:
        $ref: '#/definitions/models.User'
    type: object
  models.LoginRequest:
    properties:
      code:
        type: string
    required:
    - code
    type: object
  models.Message:
    properties:
      content:
        type: string
      created_at:
        type: string
      id:
        type: integer
    type: object
  models.MessageInput:
    properties:
      content:
        type: string
    type: object
  models.RefreshTokenRequest:
    properties:
      refresh_token:
        type: string
    required:
    - refresh_token
    type: object
  models.User:
    properties:
      created_at:
        type: string
      email:
        type: string
      google_id:
        type: string
      id:
        type: integer
      is_active:
        type: boolean
      last_login_at:
        type: string
      name:
        type: string
      picture:
        type: string
      updated_at:
        type: string
    type: object
host: localhost:8080
info:
  contact: {}
  description: Autoâ€‘generated Swagger docs
  title: React-Go-App API
  version: 0.1.0
paths:
  /api/auth/google/login:
    post:
      consumes:
      - application/json
      description: Authenticate user with Google OAuth
      parameters:
      - description: Google OAuth code
        in: body
        name: login
        required: true
        schema:
          $ref: '#/definitions/models.LoginRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.AuthResponse'
        "400":
          description: Bad Request
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Google OAuth Login
      tags:
      - auth
  /api/auth/google/url:
    get:
      description: Get the Google OAuth authorization URL
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Get Google OAuth URL
      tags:
      - auth
  /api/auth/logout:
    post:
      description: Logout user (client should discard tokens)
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Logout
      tags:
      - auth
  /api/auth/me:
    get:
      description: Get current user information
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.User'
        "401":
          description: Unauthorized
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: Get Current User
      tags:
      - auth
  /api/auth/refresh:
    post:
      consumes:
      - application/json
      description: Refresh access token using refresh token
      parameters:
      - description: Refresh token
        in: body
        name: refresh
        required: true
        schema:
          $ref: '#/definitions/models.RefreshTokenRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties:
              type: string
            type: object
        "400":
          description: Bad Request
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Refresh Token
      tags:
      - auth
  /api/messages:
    get:
      consumes:
      - application/json
      description: |-
        Get all messages
        Insert a new message
      parameters:
      - description: message payload
        in: body
        name: msg
        required: true
        schema:
          $ref: '#/definitions/models.MessageInput'
      produces:
      - application/json
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.Message'
            type: array
        "201":
          description: Created
          schema:
            additionalProperties:
              type: integer
            type: object
      summary: Create message
      tags:
      - messages
      - messages
    post:
      consumes:
      - application/json
      description: |-
        Get all messages
        Insert a new message
      parameters:
      - description: message payload
        in: body
        name: msg
        required: true
        schema:
          $ref: '#/definitions/models.MessageInput'
      produces:
      - application/json
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.Message'
            type: array
        "201":
          description: Created
          schema:
            additionalProperties:
              type: integer
            type: object
      summary: Create message
      tags:
      - messages
      - messages
  /health:
    get:
      description: Returns 200 if DB is reachable
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Health check
      tags:
      - health
swagger: "2.0"
